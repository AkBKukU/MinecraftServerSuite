#!/bin/bash

sysdate=$(date +"20%y-%m-%d")

mcDir="/var/minecraftd"

backupDir="/var/minecraftd/backups"
backupsToKeep=5

# Prefered server version/type
# vanilla
# cb-rb
# cb-beta
# cb-dev
serverType="cb-dev"


# Include basicFunctions library during development
#    It's kept seperate to make files easier to read
if [ -f './basicFunctions.sh' ]
	then

	source ./basicFunctions.sh
fi

# Insert basicFunctions library during install
#[INSERT_FUNCTIONS_HERE]


# getNewLink
# 
# Parses the Minecraft download page for the link for the newest version of Minecraft
function getNewLink ()
{	

	case $serverType in 

		'vanilla')
			# Link to Minecraft download page
			PAGE="https://minecraft.net/download"

			# Get page HTML as raw text
			RAW_PAGE=$(wget "$PAGE" -q -O -)

			# Set text that comes before and after the link
			before="https"
			after='.jar" class="download-link" data-dist="server"'

			# Find the points in the page HTML where the server download link is
			end=$(awk -v a="$RAW_PAGE" -v b="$after" 'BEGIN{print index(a,b)}')
			start=`expr $(awk -v a="${RAW_PAGE:$(expr $end - 120):120}" -v b="$before" 'BEGIN{print index(a,b)}') + $end - 121`

			# Return the download link as a string
			echo "${RAW_PAGE:$start:$(expr $end - $start)}jar"
			;;

		'cb-rb')
			# Link to Craftbukkit download page
			PAGE="https://dl.bukkit.org/downloads/craftbukkit/"

			# Get page HTML as raw text

			RAW_PAGE=$(wget "$PAGE" -q -O -)

			# Set text that comes before, after, and is near the info
			close="chan-rb"
			after='.jar"'
			before='href="'

			# Get the area of the part that is close starts because there are few unique ids on the page
			astart=$(awk -v a="$RAW_PAGE" -v b="$close" "BEGIN{print index(a,b)}" 2>/dev/null ) 
			area=${RAW_PAGE:$astart}

			# Find the points in the page HTML where the info is
			start=`expr $(awk -v a="$area" -v b="$before" 'BEGIN{print index(a,b)}' 2>/dev/null ) + $astart + ${#before} - 1` 
			end=$(awk -v a="${RAW_PAGE:$start}" -v b="$after" "BEGIN{print index(a,b)}" 2>/dev/null ) 

			# Return the version number as a string
			echo "https://dl.bukkit.org${RAW_PAGE:$start:$(expr $end - 1)}.jar"
			;;

		'cb-beta')
			# Link to Craftbukkit download page
			PAGE="https://dl.bukkit.org/downloads/craftbukkit/"

			# Get page HTML as raw text

			RAW_PAGE=$(wget "$PAGE" -q -O -)

			# Set text that comes before, after, and is near the info
			close="chan-beta"
			after='.jar"'
			before='href="'

			# Get the area of the part that is close starts because there are few unique ids on the page
			astart=$(awk -v a="$RAW_PAGE" -v b="$close" "BEGIN{print index(a,b)}" 2>/dev/null ) 
			area=${RAW_PAGE:$astart}

			# Find the points in the page HTML where the info is
			start=`expr $(awk -v a="$area" -v b="$before" 'BEGIN{print index(a,b)}' 2>/dev/null ) + $astart + ${#before} - 1` 
			end=$(awk -v a="${RAW_PAGE:$start}" -v b="$after" "BEGIN{print index(a,b)}" 2>/dev/null ) 

			# Return the version number as a string
			echo "https://dl.bukkit.org${RAW_PAGE:$start:$(expr $end - 1)}.jar"
			;;

		'cb-dev')
			# Link to Craftbukkit download page
			PAGE="https://dl.bukkit.org/downloads/craftbukkit/"

			# Get page HTML as raw text

			RAW_PAGE=$(wget "$PAGE" -q -O -)

			# Set text that comes before, after, and is near the info
			close="chan-dev"
			after='.jar"'
			before='href="'

			# Get the area of the part that is close starts because there are few unique ids on the page
			astart=$(awk -v a="$RAW_PAGE" -v b="$close" "BEGIN{print index(a,b)}" 2>/dev/null ) 
			area=${RAW_PAGE:$astart}

			# Find the points in the page HTML where the info is
			start=`expr $(awk -v a="$area" -v b="$before" 'BEGIN{print index(a,b)}' 2>/dev/null ) + $astart + ${#before} - 1` 
			end=$(awk -v a="${RAW_PAGE:$start}" -v b="$after" "BEGIN{print index(a,b)}" 2>/dev/null ) 

			# Return the version number as a string
			echo "https://dl.bukkit.org${RAW_PAGE:$start:$(expr $end - 1)}.jar"
			;;
	esac
}


# getNewestVersion
# 
# Parses the Minecraft wiki page to find the newest version number of Minecraft
function getNewestVersion ()
{

	case $serverType in 

		'vanilla')
			# Link to Minecraft wiki page
			PAGE="http://minecraft.gamepedia.com/Minecraft"

			# Get page HTML as raw text

			RAW_PAGE=$(wget "$PAGE" -q -O -)

			# Set text that comes before, after, and is near the info
			close="<dt>Computer</dt>"
			after='</a>'
			before="\">"

			# Half the page because it is huge and the version number is located in the second half
			HALF_PAGE=${RAW_PAGE:0:$(expr ${#RAW_PAGE} / 2 ) }

			# Get the area of the part that is close starts because there are few unique ids on the page
			astart=$(awk -v a="$HALF_PAGE" -v b="$close" "BEGIN{print index(a,b)}")
			area=${HALF_PAGE:$astart}

			# Find the points in the page HTML where the info is
			start=`expr $(awk -v a="$area" -v b="$before" 'BEGIN{print index(a,b)}') + $astart + 1`
			end=$(awk -v a="${HALF_PAGE:$start}" -v b="$after" "BEGIN{print index(a,b)}")

			# Return the version number as a string
			echo "${HALF_PAGE:$start:$(expr $end - 1)}"
			;;

		'cb-rb')
			# Link to Craftbukkit download page
			PAGE="https://dl.bukkit.org/downloads/craftbukkit/"

			# Get page HTML as raw text

			RAW_PAGE=$(wget "$PAGE" -q -O -)

			# Set text that comes before, after, and is near the info
			close="chan-rb"
			after='">'
			before='version '

			# Get the area of the part that is close starts because there are few unique ids on the page
			astart=$(awk -v a="$RAW_PAGE" -v b="$close" "BEGIN{print index(a,b)}" 2>/dev/null ) 
			area=${RAW_PAGE:$astart}

			# Find the points in the page HTML where the info is
			start=`expr $(awk -v a="$area" -v b="$before" 'BEGIN{print index(a,b)}' 2>/dev/null ) + $astart + ${#before} - 1` 
			end=$(awk -v a="${RAW_PAGE:$start}" -v b="$after" "BEGIN{print index(a,b)}" 2>/dev/null ) 

			# Return the version number as a string
			echo "${RAW_PAGE:$start:$(expr $end - 1)}"
			;;

		'cb-beta')
			# Link to Craftbukkit download page
			PAGE="https://dl.bukkit.org/downloads/craftbukkit/"

			# Get page HTML as raw text

			RAW_PAGE=$(wget "$PAGE" -q -O -)

			# Set text that comes before, after, and is near the info
			close="chan-beta"
			after='">'
			before='version '

			# Get the area of the part that is close starts because there are few unique ids on the page
			astart=$(awk -v a="$RAW_PAGE" -v b="$close" "BEGIN{print index(a,b)}" 2>/dev/null ) 
			area=${RAW_PAGE:$astart}

			# Find the points in the page HTML where the info is
			start=`expr $(awk -v a="$area" -v b="$before" 'BEGIN{print index(a,b)}' 2>/dev/null ) + $astart + ${#before} - 1` 
			end=$(awk -v a="${RAW_PAGE:$start}" -v b="$after" "BEGIN{print index(a,b)}" 2>/dev/null ) 

			# Return the version number as a string
			echo "${RAW_PAGE:$start:$(expr $end - 1)}"
			;;

		'cb-dev')
			# Link to Craftbukkit download page
			PAGE="https://dl.bukkit.org/downloads/craftbukkit/"

			# Get page HTML as raw text

			RAW_PAGE=$(wget "$PAGE" -q -O -)

			# Set text that comes before, after, and is near the info
			close="chan-dev"
			after='">'
			before='version '

			# Get the area of the part that is close starts because there are few unique ids on the page
			astart=$(awk -v a="$RAW_PAGE" -v b="$close" "BEGIN{print index(a,b)}" 2>/dev/null ) 
			area=${RAW_PAGE:$astart}

			# Find the points in the page HTML where the info is
			start=`expr $(awk -v a="$area" -v b="$before" 'BEGIN{print index(a,b)}' 2>/dev/null ) + $astart + ${#before} - 1` 
			end=$(awk -v a="${RAW_PAGE:$start}" -v b="$after" "BEGIN{print index(a,b)}" 2>/dev/null ) 

			# Return the version number as a string
			echo "${RAW_PAGE:$start:$(expr $end - 1)}"
			;;
	esac

}

# getCurrentVersion
# 
# Run a copy of the server in the tmp folder to get it's version
function getCurrentVersion ()
{
	# Copy to a new temp directory
	mkdir /tmp/mcManager/
	sudo cp "$mcDir/minecraft-server.jar" /tmp/mcManager/

	# Start the server to generate a log file. It will stop on the eula agreement
	cd /tmp/mcManager/
	java -Xms512M -Xmx1G -jar ./minecraft-server.jar &>> /dev/null

	# Get latest log as raw text
	RAW_PAGE=$(cat /tmp/mcManager/logs/latest.log)

	# Set text that comes before the version number
	before="version "

	# Find the point in the log where the version number
	start=$(awk -v a="$RAW_PAGE" -v b="$before" 'BEGIN{print index(a,b)}')

	# Return the download link as a string after cutting off the end
	echo "$(echo ${RAW_PAGE:$(expr $start + ${#before} - 1 )} | sed 's/\s.*$//' | tail -1 )"

	rm -r /tmp/mcManager/

}


# checkForVanillaUpdate
# 
# Takes the newest version number and compares it to the currently running one to see if they match.
function checkForUpdate ()
{
	if [ "$(getCurrentVersion)" != "$(getNewestVersion)" ]
	then
		echo "Not Up to Date!"
	else
		echo "Up to date"
	fi
}


# autoUpdate
# 
# Checks for any updates and automaticaly applies them
function autoUpdate ()
{
	if [ "$(checkForUpdate)" == "Not Up to Date!" ]
	then
		updateMinecraft
	else
		echo "No update needed"
	fi
}


# installMinecraft
# 
# Installs the Minecraft server and sets it up as a system service
function installMinecraft ()
{

	rootTest

	# Setup /var/minecraftd
	mkdir "$mcDir"

	# Download program
	updateMinecraft

	# Put files in place
	updatemcManager

	# Accept EULA
	getYesNo "Do you accept the Minecraft server eula (https://account.mojang.com/documents/minecraft_eula)?"
	if [ "$?" == "1" ]
		then
		service minecraftd start
        until [ -f "$mcDir/eula.txt" ]
        do
            sleep 1
        done
		sed -i 's/^eula=false$/eula=true/' "$mcDir/eula.txt"

	fi

	# Generate Files
	service minecraftd start
    until [ -f "$mcDir/server.properties" ]
    do
        sleep 1
    done
	service minecraftd stop

	# Link server.properties to /etc
	unlink /etc/minecraftd.conf
	ln -s "$mcDir/server.properties" /etc/minecraftd.conf

	# Add ops
	setOPS
	
}

# changeMOTD
# 
# Sets a new server message of the day
function changeMOTD ()
{
	sed -i 's/motd=.*/motd=test/' server.properties
}


# changeMOTD
# 
# Sets a new server message of the day
function setOPS ()
{
	rootTest
	
	currentOps=""
	while read line
	do
		line=$(echo "$line" | tr -d ' ')
			if  [ "$line" != "" ]
				then
					currentOps="$currentOps $line"
			fi
			
	done < "$mcDir/ops.txt"
	currentOps=$(echo $currentOps | sed 's/ *$//')
	read -e -p "Users to op (Seperate with spaces): " -i "$currentOps" ops
	echo "$ops" | sed 's/ *$//' | sed 's/ /\n/' > "$mcDir/ops.txt"
}

# updateMinecraft
# 
# Updates Minecraft
function updateMinecraft ()
{	
	rootTest

	service minecraftd stop

	# Download program
	wget $(getNewLink) -O "$mcDir/minecraft-server.jar"
	
	service minecraftd start
}

# backupMinecraft
# 
# Backs up the entire Minecraft setup and worlds
function backupMinecraft ()
{

	rootTest

	mkdir $backupDir

	backupName="$sysdate-$(getCurrentVersion)-Backup"
	tar -czf $backupDir/$backupName.tar.gz $mcDir
}

# autoBackupMinecraft
# 
# Backs up Minecraft and checks if there are more backups than wanted
function autoBackupMinecraft ()
{

	rootTest

	backupMinecraft

	cd $backupDir

	files=(*)
	numfiles=${#files[@]}
	echo "$backupsToKeep < $numfiles"

	if [ "$backupsToKeep" -lt "$numfiles" ]
		then
			rm "${files[0]}"
	fi

}



# updatemcManager
# 
# Installs all the mcManager files
function updatemcManager ()
{

	rootTest

	# Put files in place
	cp start-minecraft "$mcDir/minecraftd"
	cp mcmanager "$mcDir/mcmanager"
	cp service-minecraft /etc/init.d/minecraftd

	if [ ! -f "/usr/sbin/mcmanager" ]
		then
		ln -s "$mcDir/mcmanager" /usr/sbin/mcmanager
	fi
	if [ ! -f "/usr/sbin/minecraftd" ]
		then
		ln -s "$mcDir/minecraftd" /usr/sbin/minecraftd
	fi

	includeScript "./basicFunctions.sh" "#[INSERT_FUNCTIONS_HERE]" > "$mcDir/mcmanager"
	
	# Set to run on startup
	update-rc.d minecraftd defaults  &>> /dev/null
}


# status
# 
# Returns current information about the server
function status ()
{

	rootTest

	echo "Current Version: $(getCurrentVersion) Newest Version: $(getNewestVersion)"
}




# Logic
case $1 in


	'getNewLink')
		getNewLink
		;;

	'getNewestVersion')
		getNewestVersion
		;;

	'getCurrentVersion')
		getCurrentVersion
		;;

	'checkForUpdate')
		checkForUpdate
		;;

	'autoUpdate')
		autoUpdate
		;;

	'updateMinecraft')
		updateMinecraft
		;;

	'installMinecraft')
		installMinecraft
		;;

	'setOPS')
		setOPS
		;;

	'backupMinecraft')
		backupMinecraft
		;;

	'autoBackupMinecraft')
		autoBackupMinecraft
		;;

	'updatemcManager')
		updatemcManager
		;;

	'status')
		updatemcManager
		;;

	*)
	    echo "Usage: $0 {getNewVanillaLink|getNewVanillaVersion|getCurrentVersion|checkForVanillaUpdate|installMinecraft|updatemcManager}" >&2
	    exit 3
		;;
esac

