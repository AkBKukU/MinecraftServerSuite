#!/bin/bash

sysdate=$(date +"20%y-%m-%d")
systime=$(date +"%T")

mcDir="/var/minecraftd"

backupDir="/var/mcsbackups"
backupsToKeep=5


# Prefered server version/type
# vanilla
# cb-rb
# cb-beta
# cb-dev
serverType="vanilla"


# Include library files during development
#    Comments are defined to have the files injected on install

# basicFunctions
#  Contains general functions
if [ -f './basicFunctions.sh' ]
	then
	source ./basicFunctions.sh
fi

#[INSERT_FUNCTIONS_HERE]


# webDataParsing
#  Reads web pages to get cersion numbers and download links
if [ -f './webDataParsing.sh' ]
	then
	source ./webDataParsing.sh
fi

#[INSERT_WEB_FUNCTIONS_HERE]   


# motd
#  Formats the motd value for server.properties
if [ -f './motd.sh' ]
	then
	source ./motd.sh
fi


#[INSERT_MOTD_FUNCTIONS_HERE]    


# getCurrentVersion
# 
# Run a copy of the server in the tmp folder to get it's version
function getCurrentVersion ()
{
	# Copy to a new temp directory
	mkdir /tmp/mcManager/
	sudo cp "$mcDir/minecraft-server.jar" /tmp/mcManager/

	# Start the server to generate a log file. It will stop on the eula agreement
	cd /tmp/mcManager/
	java -Xms512M -Xmx1G -jar ./minecraft-server.jar &>> /dev/null

	# Get latest log as raw text
	RAW_PAGE=$(cat /tmp/mcManager/logs/latest.log)

	# Set text that comes before the version number
	before="version "

	# Find the point in the log where the version number
	start=$(awk -v a="$RAW_PAGE" -v b="$before" 'BEGIN{print index(a,b)}')

	# Return the download link as a string after cutting off the end
	echo "$(echo ${RAW_PAGE:$(expr $start + ${#before} - 1 )} | sed 's/\s.*$//' | tail -1 )"

	rm -r /tmp/mcManager/

}


# checkForVanillaUpdate
# 
# Takes the newest version number and compares it to the currently running one to see if they match.
function checkForUpdate ()
{
	if [ "$(getCurrentVersion)" != "$(getNewestVersion)" ]
	then
		echo "Not Up to Date!"
	else
		echo "Up to date"
	fi
}


# autoUpdate
# 
# Checks for any updates and automaticaly applies them
function autoUpdate ()
{
	if [ "$(checkForUpdate)" == "Not Up to Date!" ]
	then
		updateMinecraft
	else
		echo "No update needed"
	fi
}


# installMinecraft
# 
# Installs the Minecraft server and sets it up as a system service
function installMinecraft ()
{

	rootTest

	# Setup directory for the server
	mkdir "$mcDir"

	# Download program
	updateMinecraft

	# Put managment files in place
	updatemcManager

	# Accept EULA
	getYesNo "Do you accept the Minecraft server eula (https://account.mojang.com/documents/minecraft_eula)?"
	if [ "$?" == "1" ]
		then
		service minecraftd start
        until [ -f "$mcDir/eula.txt" ]
        do
            sleep 1
        done
		sed -i 's/^eula=false$/eula=true/' "$mcDir/eula.txt"

	fi

	# Generate Files
	service minecraftd start
    until [ -f "$mcDir/server.properties" ]
    do
        sleep 1
    done
	service minecraftd stop

	# Link server.properties to /etc
	unlink /etc/minecraftd.conf
	ln -s "$mcDir/server.properties" /etc/minecraftd.conf

	# Add ops
	setOPS

	# set MOTD
	setMOTD
	
}

# changeMOTD
# 
# Sets a new server message of the day
function setMOTD ()
{
	rootTest

	 
echo "This uses the offical names of the format codes to make it easier to edit the motd. Enter the format you want in brackets like this:
[Dark Blue]Mine[Green]Craft [Reset][Italic]Rules!

Color Codes:
[Black]			[White]
[Dark Gray]		[Gray]
[Dark Blue]		[Blue]
[Dark Green]		[Green]
[Dark Aqua]		[Aqua]
[Dark Red]		[Red]
[Dark Purple]		[Light Purple]
[Gold]			[Yellow]

Style Codes:
[Obfuscated]		[Bold]
[Strikethrough]		[Underline]
[Italic]		[Reset]

Remeber to use [Reset] to remove color and style formats after you use them.
"

	echo "Edit MOTD:"
	# Get current motd and convert it to the easy to edit format
	currentMOTD=$(convertMOTDfromFile "$(cat "$mcDir/server.properties" | grep motd | sed 's/^motd=//')")

	# Get new motd
	read -eri "$currentMOTD" motd

	# Convert new motd to the server.properties format
	motd=$(convertMOTDtoFile "$motd")

	# Replace old motd int server.properties
	sed -i s/'motd=.*'/'motd='"$motd"/ "$mcDir/server.properties"
}


# setOPS
# 
# Configure admins for the server
function setOPS ()
{

	# TODO: Rewrite to use new UUID system and ops.json

	rootTest
	
	# Read current admins from ops.txt
	currentOps=""
	while read line
	do
		line=$(echo "$line" | tr -d ' ')
			if  [ "$line" != "" ]
				then
					currentOps="$currentOps $line"
			fi
			
	done < "$mcDir/ops.txt"

	# Replacenewlines with spaces
	currentOps=$(echo $currentOps | sed 's/ *$//')

	# Get ops from user
	read -e -p "Users to op (Seperate with spaces): " -i "$currentOps" ops

	# Replace spaces with newlines and write to ops.txt
	echo "$ops" | sed 's/ *$//' | sed 's/ /\n/' > "$mcDir/ops.txt"
}

# updateMinecraft
# 
# Updates Minecraft
function updateMinecraft ()
{	
	rootTest

	service minecraftd stop

	# Download program
	wget $(getNewLink) -O "$mcDir/minecraft-server.jar"
	
	service minecraftd start
}

# backupMinecraft
# 
# Backs up the entire Minecraft setup and worlds
function backupMinecraft ()
{

	rootTest

	# Test if the backups folder exists and create it if not
	if [ ! -d $backupDir ]
		then
		mkdir $backupDir
	fi

	# Generate back name from date and version
	backupName="$sysdate-$(getCurrentVersion)-Backup"

	# Compress the Minecraft server directory and store it in the backups folder
	tar -czf $backupDir/$backupName.tar.gz $mcDir
}

# autoBackupMinecraft
# 
# Backs up Minecraft and checks if there are more backups than wanted
function autoBackupMinecraft ()
{

	rootTest

	backupMinecraft

	cd $backupDir

	# Test if there are more backups than allowed and remove old one if there are
	files=(*)
	numfiles=${#files[@]}
	echo "$backupsToKeep < $numfiles"

	if [ "$backupsToKeep" -lt "$numfiles" ]
		then
			rm "${files[0]}"
	fi

}



# updatemcManager
# 
# Installs all the mcmanager files
#
# This should not be run from the installed version. It is only used during setup and to update from the git files
function updatemcManager ()
{

	rootTest

	# Put files in place
	cp start-minecraft "$mcDir/minecraftd"
	cp "./mcmanager" "$mcDir/mcmanager"
	cp service-minecraft /etc/init.d/minecraftd

	# Setup the script to enable auto completion of mcmanger arguments
	cp "./autocomplete" "$mcDir/autocomplete"
	if grep -q "#mcmanager autocomplete" "/etc/bash.bashrc"
		then
		echo "nothing" >> /dev/null
	else
		echo "source $mcDir/autocomplete #mcmanager autocomplete" >> "/etc/bash.bashrc"
	fi

	# Setup symboliclinks to make commands runnable from anywhere
	if [ ! -f "/usr/sbin/mcmanager" ]
		then
		ln -s "$mcDir/mcmanager" /usr/sbin/mcmanager
	fi
	if [ ! -f "/usr/sbin/minecraftd" ]
		then
		ln -s "$mcDir/minecraftd" /usr/sbin/minecraftd
	fi

	# Build full mcmanger script during install
	includeScript "./basicFunctions.sh" "#[INSERT_FUNCTIONS_HERE]" "$mcDir/mcmanager"
	includeScript "./webDataParsing.sh" "#[INSERT_WEB_FUNCTIONS_HERE]   " "$mcDir/mcmanager"
	includeScript "./motd.sh" "#[INSERT_MOTD_FUNCTIONS_HERE]    " "$mcDir/mcmanager"
	
	# Set to run on startup
	update-rc.d minecraftd defaults  &>> /dev/null
}


# status
# 
# Returns current information about the server
function status ()
{

	rootTest

	echo "Current Version: $(getCurrentVersion) Newest Version: $(getNewestVersion). $(checkForUpdate)"
}




# Logic
case $1 in


	'getNewLink')
		getNewLink
		;;

	'getNewestVersion')
		getNewestVersion
		;;

	'getCurrentVersion')
		getCurrentVersion
		;;

	'checkForUpdate')
		checkForUpdate
		;;

	'autoUpdate')
		autoUpdate
		;;

	'updateMinecraft')
		updateMinecraft
		;;

	'installMinecraft')
		installMinecraft
		;;

	'setOPS')
		setOPS
		;;

	'setMOTD')
		setMOTD
		;;

	'backupMinecraft')
		backupMinecraft
		;;

	'autoBackupMinecraft')
		autoBackupMinecraft
		;;

	'updatemcManager')
		updatemcManager
		;;

	'status')
		status
		;;

	*)
	    echo "Usage: $0 {getNewLink|getNewestVersion|getCurrentVersion|checkForUpdate|autoUpdate|updateMinecraft|installMinecraft|setOPS|setMOTD|backupMinecraft|autoBackupMinecraft|status}" >&2
	    exit 3
		;;
esac

